:DOC-CONFIG:
#+property: header-args :tangle-mode (identity #o755)
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:
#+TITLE: Applications
#+AUTHOR: Tom Monck

* Table of Contents :TOC_3:noexport:
- [[#os-specific-prerequisites][OS Specific prerequisites]]
  - [[#setup-the-package-manager][Setup the package manager]]
    - [[#windows][Windows]]
    - [[#macos][MacOS]]
    - [[#ubuntu][Ubuntu]]
  - [[#terminal][Terminal]]
    - [[#macos-1][MacOS]]
- [[#development-environment][Development Environment]]
  - [[#vcs][VCS]]
    - [[#windows-1][Windows]]
    - [[#macos-2][MacOS]]
    - [[#ubuntu-1][Ubuntu]]
    - [[#git-promptsh][git-prompt.sh]]
  - [[#programming-languages][Programming Languages]]
    - [[#c][C#]]
    - [[#jsts][JS/TS]]
    - [[#python][Python]]
    - [[#golang][GoLang]]
  - [[#ides][IDEs]]
    - [[#emacs][Emacs]]
    - [[#chemacs2][Chemacs2]]
    - [[#doom][Doom]]
    - [[#vs-code][VS Code]]
    - [[#visual-studio][Visual Studio]]
    - [[#jetbrains][Jetbrains]]
  - [[#additional-applications-that-assist-with-development][Additional applications that assist with development]]
    - [[#docker][Docker]]
    - [[#minikube][Minikube]]
    - [[#podman][Podman]]
    - [[#postman][Postman]]
- [[#browsers][Browsers]]
  - [[#firefox][Firefox]]
  - [[#chrome][Chrome]]
  - [[#nyxt][Nyxt]]
    - [[#first-impressions][First impressions]]
- [[#communication][Communication]]
  - [[#slack][Slack]]
    - [[#windows-2][Windows]]
    - [[#macos-3][MacOS]]
    - [[#ubuntu-2][Ubuntu]]
  - [[#discord][Discord]]
    - [[#windows-3][Windows]]
    - [[#macos-4][MacOS]]
    - [[#ubuntu-3][Ubuntu]]
- [[#items-to-look-at][Items to look at]]

* OS Specific prerequisites
We know that were are going to need separate setup files based upon the operating system so let's configure some default headers for these files.

#+html: <details><summary>setupScripts/windows.ps1</summary>
#+begin_src sh :tangle setupScripts/windows.ps1 :tangle-mode (identity #o755)
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is auto generated from Applications.org
#+end_src
#+html: </details>

#+html: <details><summary>setupScripts/mac.sh</summary>
#+begin_src sh :tangle setupScripts/mac.sh :shebang #!/usr/bin/env bash :comments 'no' :tangle-mode (identity #o755)
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is auto generated from Applications.org
#+end_src
#+html: </details>

#+html: <details><summary>setupScripts/ubuntu.sh</summary>
#+begin_src sh :tangle setupScripts/ubuntu.sh :shebang #!/usr/bin/env bash :tangle-mode (identity #o755)
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is auto generated from Applications.org
#+end_src
#+html: </details>

** Setup the package manager
Each OS has a specific package manager that can be used for installing applications.
*** Windows
Windows has the =Windows Store= but that isn't easy to work with in terminal so lets install =chocolatey= I mean everyone likes chocolate right?
**** [[https://chocolatey.org][Chocolatey]]
Need to figure out how to configure this for ps1. This might take some work.
#+begin_src sh :tangle setupScripts/windows.ps1 :comments 'no'
If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole(`
  [Security.Principal.WindowsBuiltInRole]::Administrator))
{
    Write-Warning "You do not have Administrator rights to run this script!`nPlease re-run this script as an Administrator!"
    exit 1
}

$executionPolicy = Get-ExecutionPolicy
if ($executionPolicy -ne "Unrestricted")
{
    Write-Host "Not Equal"
    Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
}

if(-not $env:ChocolateyInstall -or -not (Test-Path "$env:ChocolateyInstall"))
{
    Write-Output "Chocolatey Not Found, Installing..."
    if($PSVersionTable.PSVersion.Major -gt 2)
    {
        Invoke-WebRequest https://chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression
    }
    else
    {
        Invoke-Expression ((new-object net.webclient).DownloadString('http://chocolatey.org/install.ps1'))
    }
}
#+end_src
*** MacOS
Mac doesn't ship with =homebrew= which I use to install applications and packages. Let's install it now.
**** [[https://brew.sh][Homebrew]]

#+begin_src sh :tangle setupScripts/mac.sh :comments 'no'
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" && brew upgrade
brew tap caskroom/cask 2> /dev/null
brew cask upgrade
#+end_src
*** Ubuntu
Ubuntu has built in package managers which we can utilize.
**** [[https://linux.die.net/man/apt][apt-get]]
Nothing to setup
**** [[https://snapcraft.io][Snap]]
Nothing to setup
** Terminal
On some OS's they don't install the latest and greatest by default. I'm looking at you MacOS

*** MacOS
Let's upgrade terminal to run the latest version of bash.
#+begin_src sh :tangle mac.sh
brew install bash
#+end_src

Now that we've install the latest version of bash let's make the computer actually use this as the default terminal
#+begin_src sh :tangle mac.sh
echo $(brew --prefix)/bin/bash | sudo tee -a /private/etc/shells
sudo chpass -s /usr/local/bin/bash $(whoami)
#+end_src

Now that we have the latest bash and I dislike not being able to have tab completion let's install bash-completion
#+begin_src sh :tangle mac.sh
brew install bash-completion@2
#+end_src

* Development Environment
As most any developer I my own personal preferences when it comes to my development environment. Some of this preferences have been shaped by the programming languages I do/have written. In this section I setup any language specific needs, install some IDE's, and document some useful tools and plugins.

** VCS
Let's setup some version control systems. There really is only one =git=, haha just kidding. That's the only one I use though so this section is dedicated to making it like I want.
*** Windows
#+begin_src sh :tangle setupScripts/windows.ps1
choco install git
#+end_src
*** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
brew install git
#+end_src
*** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh
sudo apt install git
#+end_src
*** git-prompt.sh
I really like how =posh_git.ps1= modifies the terminal to show status, so let's put that in place that our =.bashrc= can source it from.

Shout out to the maintainer of the =posh-git-sh= version of =posh_git=
#+NAME: git-prompt
#+begin_src sh
curl https://raw.githubusercontent.com/lyze/posh-git-sh/master/git-prompt.sh > ~/git-prompt.sh
#+end_src

#+RESULTS: git-prompt

**** Windows
Probably not going to use this os :D
**** MacOS
#+begin_src sh :tangle setupScripts/mac.sh :noweb yes
<<git-prompt>>
#+end_src
**** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh :noweb yes
<<git-prompt>>
#+end_src
** Programming Languages
I have some experience in the following languages. These are the ones I use the most so they will be setup on each computer in anticipation of doing some level of development in each.
*** C#
To develop C# there is some SDK's that need to be installed. Depending on if we are developing .Net Framework or .Net Core will determine the necessary SDK's. These scripts assume the latest versions of .NET.
**** Windows
**** MacOS
**** Ubuntu
***** Dotnet
Seems kind of redundant to talk about but we first need to install dotnet sdk and runtimes.

#+begin_src sh :tangle setupScripts/ubuntu.sh
wget https://dot.net/v1/dotnet-install.sh -P ./bin
export PATH=$PATH:$PWD/bin
dotnet-install.sh -c 6.0
#dotnet-install.sh -c 5.0
#+end_src

***** Mono
Placeholder as we might need this.
#+begin_src sh :tangle setupScripts/ubuntu.sh
# Uncomment to install mono
# sudo apt install gnupg ca-certificates
# sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
# echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
# sudo apt update

# sudo apt install mono-complete
#+end_src

#+RESULTS:

*** JS/TS
Documentation around JavaScript and TypeScript is readily available with a simple search on the interwebs. If you are reading this section expecting a full blown explanation you won't find. I am doing a basic setup of just adding =node= and =npm= as these are usually sufficient to get you moving.
**** Windows
**** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
brew install node # This will install npm as well
#+end_src
**** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh
apt install nodejs
#+end_src
*** Python
Python is a fun language with many uses. I mainly use it for developing my home automation setup. If you are ever interested in a fun DIY project I recommend looking into setting up [[https://home-assistant.io][Home Assistant]]. It can run on a RPI and is fun to setup. I personally have set this up and my house and will never look back again.

**** Windows
**** MacOS
**** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh
alias python=python3
#+end_src
*** GoLang
**** Mac
#+begin_src sh :tangle setupScripts/mac.sh
brew install go
#+end_src

To make doom happy we need to ensure that a few packages are installed. This should install the items in the bin directory of =go=.
#+begin_src sh :tangle setupScripts/mac.sh
go install github.com/x-motemen/gore/cmd/gore@latest
go install github.com/stamblerre/gocode@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/cmd/gorename@latest
go install golang.org/x/tools/cmd/guru@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest
#+end_src
**** Ubuntu
Installing go is as simple as
#+begin_src sh :tangle setupScripts/ubuntu.sh
sudo snap install go --classic
#+end_src

To make doom happy we need to ensure that a few packages are installed. This should install the items in the bin directory of =go=.
#+begin_src sh :tangle setupScripts/ubuntu.sh
go install github.com/x-motemen/gore/cmd/gore@latest
go install github.com/stamblerre/gocode@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/cmd/gorename@latest
go install golang.org/x/tools/cmd/guru@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest
#+end_src
** IDEs
*** Emacs
Lets install Emacs itself
**** Windows
TODO
**** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
brew tap d12frosted/emacs-plus
# brew install emacs-plus # install the latest version of Emacs (as of writing Emacs 27)
# brew install emacs-plus@26 [options] # install Emacs 26
# brew install emacs-plus@27 [options] # install Emacs 27
brew install emacs-plus@28 # install Emacs 28

ln -s /usr/local/opt/emacs-plus/Emacs.app /Applications/Emacs.app

# Check for ~/.emacs.d if exists move it before cloning the code
if [ -d "$HOME/.emacs.d" ]
   then
       mv "$HOME/.emacs.d" "$HOME/.emacs.d.bak"
fi
#+end_src
**** Ubuntu
Out of the box Ubuntu only provide Emacs 25.3. So we need to use snap to install the latest version.

#+begin_src sh :tangle setupScripts/ubuntu.sh :noweb yes
snap install emacs --classic

# The default location of the .emacs.d directory should only exist if you open emacs after installation.
if [ -d "$HOME/.emacs.d" ]
   then
       mv "$HOME/.emacs.d" "$HOME/.emacs.d.bak"
fi
#+end_src

*** Chemacs2
Chemacs2 is useful for creating multiple emacs profiles. This allows you to have a `default` configuration that you know works and have others that you want to try out or tweak. I keep one profile for modifying my configuration prior to placing in my default. This allows me to see if it fits into my workflow or if I am missing packages.

With chemacs you can start emacs with a specific profile by passing the =--with-profile= command line option. In order to achieve this we need to configure a profile file =~/.emacs-profiles.el=. Let's configure this file now with a header alerting us that this is an auto generated file.

#+html: <details><summary>.emacs-profiles.el</summary>
#+begin_src emacs-lisp :tangle .emacs-profiles.el
;; DO NOT EDIT THIS FILE DIRECTLY!
;; This file is auto generated from Applications.org
#+end_src
#+html: </details>

When you start emacs without specifying a profile it will use the profile named =default=.

For more information regarding configuration and usage see the [[https://github.com/plexus/chemacs2][repo]].

#+name: clone_chemacs2
#+begin_src sh
git clone https://github.com/plexus/chemacs2.git ~/.emacs.d
#+end_src

**** Windows
#+begin_src sh :tangle setupScripts/windows.ps1 :noweb yes
<<clone_chemacs2>>
#+end_src

**** MacOS
#+begin_src sh :tangle setupScripts/mac.sh :noweb yes
<<clone_chemacs2>>
#+end_src
**** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh :noweb yes
<<clone_chemacs2>>
#+end_src

*** Doom
I personally use Doom Emacs as it provides a lot of nice defaults out of the box.

Straight from the [[https://github.com/hlissner/doom-emacs][Doom Emacs]] repository.
#+begin_quote
Doom is a configuration framework for GNU Emacs tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.
#+end_quote
**** Dependencies
Installation is pretty straight forward. The [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#install][docs]] do a great job of going into detail of how to install.
***** Windows
It is known that emacs is slower when running on Windows. I currently do not use emacs on Windows machines. This is partly due to me not having a windows machine. This will be updated once I have a windows machine to setup. If you are interested in setting up Doom Emacs on Windows please see the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#on-windows][documentation]].
***** MacOS
There is some specific dependencies mentioned in the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#on-macos][MacOS installation]] docs which we are setting up here.
#+begin_src sh :tangle setupScripts/mac.sh :noweb yes
# required dependencies
brew install git ripgrep
# optional dependencies
brew install coreutils fd
# Installs clang
xcode-select --install
#+end_src

***** Ubuntu
There a few challenges documented in the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#ubuntu][Ubuntu installation]] docs. We are going to work around those now.
****** Git
Doom requires git 2.28+

#+begin_src sh :tangle setupScripts/ubuntu.sh
add-apt-repository ppa:git-core/ppa
apt update
apt install git
#+end_src
****** Emacs
This one was handle above when we installed emacs itself.
****** Other dependencies

#+begin_src sh :tangle setupScripts/ubuntu.sh
apt install ripgrep fd-find
#+end_src

**** Clone
Clone the doom configuration to my own custom directory. This allows me provide this in my chemacs2 configurations.

#+name: clone_doom
#+begin_src sh
git clone https://github.com/hlissner/doom-emacs.git ~/mydoom
#+end_src

#+begin_src sh :tangle setupScripts/windows.ps1 :noweb yes
<<clone_doom>>
#+end_src

#+begin_src sh :tangle setupScripts/mac.sh :noweb yes
<<clone_doom>>
#+end_src

#+begin_src sh :tangle setupScripts/ubuntu.sh :noweb yes
<<clone_doom>>
#+end_src
**** Configure
It is easily configurable by modifying the `config.el`, `init.el`, and `packages.el` files which by default are stored in `~/.doom.d`. For further configuration information with doom checkout the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configure][configure docs]]
**** Additional dependencies
My doom configuration enables some modules that requires a few programs to be installed on the OS.
***** aspell
Used for spellchecking
****** Windows
TODO

****** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
brew install aspell
#+end_src
****** Ubuntu
My last install on Ubuntu didn't require anything special for aspell 
***** editorconfig
Used for enforcing code formatting when not using something like Resharper
****** Windows
TODO
****** MacOS
TODO
****** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh
apt install editorconfig
#+end_src
***** markdown compiler
I use the `npm` package `marked` for markdown compiler which enables markdown preview.
#+name:install_marked
#+begin_src sh
npm install -g marked
#+end_src
****** Windows
#+begin_src sh :tangle setupScripts/windows.ps1 :padline 'no' :noweb yes
<<install_marked>>
#+end_src
****** MacOS
#+begin_src sh :tangle setupScripts/mac.sh :padline 'no' :noweb yes
<<install_marked>>
#+end_src
****** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh :padline 'no' :noweb yes
<<install_marked>>
#+end_src
***** jq
****** Windows
TODO
****** MacOS
#+begin_src sh :tangle setupScripts/mac.sh :padline 'no'
brew install jq
#+end_src
****** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh :padline 'no'
apt install jq
#+end_src
***** shellcheck
This is used for shell script linting inside of emacs.
****** Windows
TODO
****** MacOS
#+begin_src sh :tangle setupScripts/mac.sh :padline 'no'
brew install shellcheck
#+end_src
****** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh :padline 'no'
apt install shellcheck
#+end_src
**** Installation
Now that we have all of the dependencies installed and doom cloned lets go ahead and setup `doom` command to be runnable from anywhere by adding it to our path.

***** Windows
***** MacOS
This needs to be validated before using
#+begin_src sh :tangle setupScripts/mac.sh :noweb yes
export PATH="$HOME/mydoom/bin:$PATH"
doom install
#+end_src
***** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh :noweb yes
export PATH="$HOME/mydoom/bin:$PATH"
doom install
#+end_src
**** Make a backup
This allows me to have a testing ground and a known working backup.
***** Window
***** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
cp -a $HOME/mydoom $HOME/backupdoom
#+end_src
***** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh
cp -a $HOME/mydoom $HOME/backupdoom
#+end_src
**** Doom utility
The [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#the-bindoom-utility][doom utility]] is extremely helpful as well as required for somethings to work. Some of the items I use on a regular basis are documented below.
***** Sync
=doom sync=: This synchronizes your config with Doom Emacs. It ensures that needed packages are installed, orphaned packages are removed and necessary metadata correctly generated. Run this whenever you modify your doom! block or packages.el file. You’ll need doom sync -u if you override the recipe of package installed by another module.
***** Upgrade
=doom upgrade=: Updates Doom Emacs (if available) and all its packages.
***** Doctor
=doom doctor=: If Doom misbehaves, the doc will diagnose common issues with your installation, system and environment.
**** Setup profile
Now that we have doom installed and all ready to go let's add it to our =.emacs-profile.el=.

#+begin_src emacs-lisp :tangle .emacs-profiles.el
(("default" . ((user-emacs-directory . "~/mydoom")
               (env . (("DOOMDIR" . "~/.doom.d")))))
 ("lab" . ((user-emacs-directory . "~/backupdoom")
               (env . (("DOOMDIR" . "~/lab")))))
 ("backup" . ((user-emacs-directory . "~/backupdoom")
               (env . (("DOOMDIR" . "~/testingThings"))))))
#+end_src

*** VS Code
This is a language agnostic IDE that is easily extensible with plugins.
You can find their documentation [[https://code.visualstudio.com][here]].
**** Windows
#+begin_src sh :tangle setupScripts/windows.ps1
choco install vscode
#+end_src
**** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
brew install vscode
#+end_src
**** Ubuntu
I do not use vs code at home
**** Plugins that are useful
There are many others which are helpful but these are the basics that I use. The others are framework and language specific which varies based upon what I am developing, as such they are not included in this list.
***** Vim
This is a vim emulation plugin to enable vim keybindings while coding in VS Code
***** Jest runner
Provides a simple way to execute jest tests without having to defined a launch.json file. It adds `Run | Debug` above `describe`, `test`, and `it` blocks for easy execution.
***** Pretty js/json
Provides a mechanism for pretty printing JSON files.
*** Visual Studio
Microsoft's .NET IDE. More information is [[https://visualstudio.microsoft.com][here]]. This IDE is also only available on Windows machines. There is a version built for mac called Visual Studio for Mac. I have tried this but it wasn't as good as some of the other IDE's I have listed. I prefer Jetbrains Rider for developing .NET on a Mac and Linux machine.
*** Jetbrains
**** Rider
Another .NET specific IDE. This IDE is cross-platform and has some of the helpful plugins for Visual Studio built in. For more information about Rider go [[https://jetbrains.com/rider][here]].

It's recommended to install things from the toolbox from JetBrains so let's install that.

#+begin_src sh :tangle setupScripts/ubuntu.sh
curl https://raw.githubusercontent.com/nagygergo/jetbrains-toolbox-install/master/jetbrains-toolbox.sh > jetbrains-toolbox.sh

./jetbrains-toolbox.sh
#+end_src

**** Resharper
A tool for enforcing coding standards, assists with finding code smells, and some helpful editing features. For more information about Resharper go [[https://jetbrains.com/resharper][here]]. I use this when I have Visual Studio installed.
**** DotCover
A tool for measuring unit test coverage in .NET Applications. This can be installed from the toolbox
** Additional applications that assist with development
*** Docker
I use this specifically for creating OCI compliant images for running containerized applications.
More information about docker can be [[https://docker.com][here]].
**** Windows
#+begin_src sh :tangle setupScripts/windows.ps1
choco install docker-desktop
#+end_src
**** MacOS
Since docker now costs money for docker desktop I am transitioning away from this particular flavor of docker.
#+begin_src sh :tangle setupScripts/mac.sh :padline 'no'
# brew cask install docker
#+end_src
This should install only the daemon which remains free to use.
#+begin_src sh :tangle setupScripts/mac.sh :padline 'no'
brew install docker
#+end_src
**** Ubuntu
TODO
*** Minikube
Minikube allows you to run a Kubernetes cluster on your local machine quickly and without much configuration.
**** Machine Requirements
Minikube does have a few requirements in order to run on the machine so make sure you are at least at the minimum specs (ideal much higher).
- 2 CPUs or more
- 2GB of free memory
- 20GB of free disk space
- Interwebs
- Container or virtual machine manager, such as Docker, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMWare Fusion/Workstation
**** Windows
Don't use windows please.
**** Mac
#+begin_src sh :tangle setupScripts/mac.sh
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
sudo install minikube-darwin-amd64 /usr/local/bin/minikube
#+end_src
**** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh :noweb yes
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube
#+end_src

#+RESULTS:

*** Podman
Still working through this and if I can integrate it into my workflow
*** Postman
This one is up for debate but it's a helpful GUI for making API calls.
* Browsers
** Firefox
A modern web browser that is better than the rest. Their site is [[https://mozilla.org][here]].
**** Windows
#+begin_src sh :tangle setupScripts/windows.ps1 :padline 'no'
choco install firefox
#+end_src
**** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
brew install firefox
#+end_src
**** Ubuntu
Comes with firefox out the box so don't have to do anything YAY!
** Chrome
Another modern web browser which is Chromium based. Their site is [[https://google.com/chrome][here]]. I use this specifically for ensuring functionality works across the different browsers.
**** Windows
#+begin_src sh :tangle setupScripts/windows.ps1 :padline 'no'
choco install googlechrome
#+end_src
**** MacOS
#+begin_src sh :tangle setupScripts/mac.sh :padline 'no'
brew install chrome
#+end_src
**** Ubuntu
I don't use chrome browser here.
** Nyxt
#+begin_quote
Nyxt is a keyboard-oriented, infinitely extensible web browser designed for power users. Conceptually inspired by Emacs and Vim, it has familiar key-bindings (Emacs, vi, CUA), and is fully configurable in Lisp.
#+end_quote

This makes it the perfect companion for Emacs setups. I personally have not used this but will be looking into when I have time.

Documentation can be found at the  [[https://nyxt.atlas.engineer][nyxt website]].

*** First impressions
It's pretty cool. Kinda difficult for me since I haven't modified any of the keybindings yet. By default you have emacs, vi, and some ones it comes with. Since I've been using emacs in evil mode with =space= as the leader key it's a little confusing.
**** Keybindings I want to setup
Let's figure out how to change the keybindings shall we, then we will modify the leader key to make it closer to doom.

* Communication
Chat clients are a dime a dozen and I do not claim knowledge about all or even most of them. I tend to stick with what I know and have used. I prefer Slack out of majority of the chat tools I've used and as such will gladly set it up on all machines.

** Slack
I use slack to chat with friends and family. You can use slack in the browser or view it's documentation [[https://slack.com][here]].

*** Windows
TODO
*** MacOS
#+begin_src sh :tangle setupScripts/mac.sh
brew install slack
#+end_src
*** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh
snap install slack --classic
#+end_src
** Discord
*** Windows
Nope
*** MacOS
*** Ubuntu
#+begin_src sh :tangle setupScripts/ubuntu.sh
sudo snap install discord
#+end_src
* Items to look at
- MermaidJs
