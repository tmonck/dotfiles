#+TITLE: Applications
#+AUTHOR: Tom Monck
#+PROPERTY: header-args :tangle-mode (identity #o755)
#+startup: fold

* Table of Contents :TOC_3:noexport:
- [[#os-specific-prerequisites][OS Specific prerequisites]]
  - [[#setup-the-package-manager][Setup the package manager]]
    - [[#windows][Windows]]
    - [[#macos][MacOS]]
    - [[#ubuntu][Ubuntu]]
- [[#development-environment][Development Environment]]
  - [[#programming-languages][Programming Languages]]
    - [[#c][C#]]
    - [[#jsts][JS/TS]]
    - [[#python][Python]]
  - [[#ides][IDEs]]
    - [[#emacs][Emacs]]
    - [[#vs-code][VS Code]]
    - [[#visual-studio][Visual Studio]]
    - [[#jetbrains][Jetbrains]]
  - [[#additional-applications-that-assist-with-development][Additional applications that assist with development]]
    - [[#docker][Docker]]
    - [[#postman][Postman]]
- [[#browsers][Browsers]]
  - [[#firefox][Firefox]]
  - [[#chrome][Chrome]]
- [[#communication][Communication]]
  - [[#slack][Slack]]

* OS Specific prerequisites
Each OS has a specific package manager that can be used for installing applications.
** Setup the package manager
*** Windows
**** [[https://chocolatey.org][Chocolatey]]
Need to figure out how to configure this for ps1. This might take some work.
#+begin_src sh :tangle windows.ps1 :comments 'no'
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is generated from a literate program source file Applications.org

If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole(`
  [Security.Principal.WindowsBuiltInRole]::Administrator))
{
    Write-Warning "You do not have Administrator rights to run this script!`nPlease re-run this script as an Administrator!"
    exit 1
}

$executionPolicy = Get-ExecutionPolicy
if ($executionPolicy -ne "Unrestricted")
{
    Write-Host "Not Equal"
    Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
}

if(-not $env:ChocolateyInstall -or -not (Test-Path "$env:ChocolateyInstall"))
{
    Write-Output "Chocolatey Not Found, Installing..."
    if($PSVersionTable.PSVersion.Major -gt 2)
    {
        Invoke-WebRequest https://chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression
    }
    else
    {
        Invoke-Expression ((new-object net.webclient).DownloadString('http://chocolatey.org/install.ps1'))
    }
}
#+end_src
*** MacOS
**** [[https://brew.sh][Homebrew]]
Setup homebrew so we can install the applications we want.

#+begin_src sh :tangle mac.sh :shebang #!/usr/bin/env bash :comments 'no'
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is generated from a literate program source file Applications.org

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" && brew upgrade
brew tap caskroom/cask 2> /dev/null
brew cask upgrade
#+end_src
*** Ubuntu
Add the shebang to the top of the script for ubuntu as that is the only thing we need to configure programmatically for package management to work.

#+begin_src sh :tangle ubuntu.sh :shebang #!/usr/bin/env bash
# DO NOT EDIT THIS FILE DIRECTLY!
# This file is generated from a literate program source file Applications.org
#+end_src

**** [[https://linux.die.net/man/apt-get][apt-get]]
Nothing to setup
**** [[https://snapcraft.io][Snap]]
Nothing to setup
* Development Environment
Depending on the operating system there is some programs that I find useful to have to complete my development environment.

** Programming Languages
I have some experience in the following languages. These are the ones I use the most so they will be setup on each computer in anticipation of doing some level of development in each.
*** C#
To develop C# there is some SDK's that need to be installed. Depending on if we are developing .Net Framework or .Net Core will determine the necessary SDK's. These scripts assume .Net Core 3.1.
**** Windows
**** MacOS
**** Ubuntu
*** JS/TS
To develop JS there is a few things that will be needed. `node` and `npm` are the starting points we will install. Any other necessary items will be setup on a per project basis.
**** Windows
**** MacOS
#+begin_src sh :tangle mac.sh
brew install node # This will install npm as well
#+end_src
**** Ubuntu
*** Python
Python3 needs to be installed. This isn't my main language so not much is done here.
**** Windows
**** MacOS
**** Ubuntu
** IDEs
*** Emacs
**** Chemacs2
Chemacs2 is useful for creating multiple emacs profiles. This allows you to have a `default` configuration that you know works and have others that you want to try out or tweak. I keep one profile for modifying my configuration prior to placing in my default. This allows me to see if it fits into my workflow or if I am missing packages.

For more information regarding configuration and usage see the [[https://github.com/plexus/chemacs2][repo]].
#+name: clone_chemacs2
#+begin_src sh
# Check for ~/.emacs.d if exists move it before cloning the code
git clone git@github.com:plexus/chemacs2.git ~/.emacs.d
#+end_src
#+end
**** Doom
I personally use Doom Emacs as it provides a lot of nice defaults out of the box.

Straight from the [[https://github.com/hlissner/doom-emacs][Doom Emacs]] repository.
#+begin_quote
Doom is a configuration framework for GNU Emacs tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.
#+end_quote
***** Install
Installation is pretty straight forward. The [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#install][docs]] do a great job of going into detail of how to install.
#+name: clone_doom
#+begin_src sh
git clone git@github.com:hlissner/doom-emacs.git ~/mydoom
#+end_src
****** MacOS
There is some specific dependencies mentioned in the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#on-macos][MacOS installation]] docs which we are setting up here.
#+begin_src sh :tangle mac.sh :noweb yes
# required dependencies
brew install git ripgrep
# optional dependencies
brew install coreutils fd
# Installs clang
xcode-select --install
# Clone doome into it's specific location
<<clone_doom>>
#+end_src

Now lets install Emacs itself

#+begin_src sh :tangle mac.sh :noweb yes
brew tap d12frosted/emacs-plus
# brew install emacs-plus # install the latest version of Emacs (as of writing Emacs 27)
# brew install emacs-plus@26 [options] # install Emacs 26
# brew install emacs-plus@27 [options] # install Emacs 27
brew install emacs-plus@28 # install Emacs 28

ln -s /usr/local/opt/emacs-plus/Emacs.app /Applications/Emacs.app

if [ -d "$HOME/.emacs.d" ]
   then
       mv "$HOME/.emacs.d" "$HOME/.emacs.d.bak"
fi

<<clone_chemacs2>>
#+end_src
****** Ubuntu
There a few challenges documented in the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#ubuntu][Ubuntu installation]] docs. We are going to work around those now.
******* Git
Doom requires git 2.28+

#+begin_src sh :tangle ubuntu.sh
add-apt-repository ppa:git-core/ppa
apt update
apt install git
#+end_src
******* Emacs
Out of the box Ubuntu only provide Emacs 25.3. So we need to use snap to install the latest version.

#+begin_src sh :tangle ubuntu.sh :noweb yes
snap install emacs --classic

if [ -d "$HOME/.emacs.d" ]
   then
       mv "$HOME/.emacs.d" "$HOME/.emacs.d.bak"
fi

<<clone_chemacs2>>

<<clone_doom>>
#+end_src

***** Configure
It is easily configurable by modifying the `config.el`, `init.el`, and `packages.el` files which by default are stored in `~/.doom.d`. For further configuration information with doom checkout the [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configure][configure docs]]
****** Customizations
My doom configuration adds a few required things to be available on the OS which may not be installed by default.
******* aspell
Used for spellchecking
******** Windows
******** MacOS
#+begin_src sh :tangle mac.sh
brew install aspell
#+end_src
******** Ubuntu
******* editorconfig
Used for enforcing code formatting when not using something like Resharper
******** Windows
******** MacOS
******** Ubuntu
******* markdown compiler
I use the `npm` package `marked` for markdown compiler which enables markdown preview.
******** Windows
******** MacOS
#+begin_src sh :tangle mac.sh :padline 'no'
npm install -g marked
#+end_src
******** Ubuntu
******* jq
******** Windows
******** MacOS
#+begin_src sh :tangle mac.sh :padline 'no'
brew install jq
#+end_src
******** Ubuntu
******* shellcheck
This is used for shell script linting inside of emacs.
******** Windows
******** MacOS
#+begin_src sh :tangle mac.sh :padline 'no'
brew install shellcheck
#+end_src
******** Ubuntu

*** VS Code
This is a language agnostic IDE that is easily extensible with plugins.
You can find their documentation [[https://code.visualstudio.com][here]].
**** Windows
#+begin_src sh :tangle windows.ps1 :padline 'no'
choco install vscode
#+end_src
**** MacOS
#+begin_src sh :tangle mac.sh :padline 'no'
brew install vscode
#+end_src
**** Ubuntu
*** Visual Studio
Microsoft's .NET IDE. More information is [[https://visualstudio.microsoft.com][here]].
*** Jetbrains
**** Rider
Another .NET specific IDE. This IDE is cross-platform and has some of the helpful plugins for Visual Studio built in. For more information about Rider go [[https://jetbrains.com/rider][here]].
**** Resharper
A tool for enforcing coding standards, assists with finding code smells, and some helpful editing features. For more information about Resharper go [[https://jetbrains.com/resharper][here]]. I use this when I have Visual Studio installed.
**** DotCover
A tool for measuring unit test coverage in .NET Applications.
** Additional applications that assist with development
*** Docker
I use this specifically for creating OCI compliant images for running containerized applications.
More information about docker can be [[https://docker.com][here]].
**** Windows
#+begin_src sh :tangle windows.ps1
choco install docker-desktop
#+end_src
**** MacOS
#+begin_src sh :tangle mac.sh :padline 'no'
brew cask install docker
#+end_src
**** Ubuntu
*** Postman
This one is up for debate but it's a helpful GUI for making API calls.
* Browsers
** Firefox
A modern web browser that is better than the rest. Their site is [[https://mozilla.org][here]].
**** WIndows
#+begin_src sh :tangle windows.ps1 :padline 'no'
choco install firefox
#+end_src
**** MacOS
#+begin_src sh :tangle mac.sh :padline 'no'
brew install firefox
#+end_src
**** Ubuntu
Comes with firefox out the box so don't have to do anything YAY!
** Chrome
Another modern web browser which is Chromium based. Their site is [[https://google.com/chrome][here]]. I use this specifically for ensuring functionality works across the different browsers.
**** Windows
#+begin_src sh :tangle windows.ps1 :padline 'no'
choco install googlechrome
#+end_src
**** MacOS
#+begin_src sh :tangle mac.sh :padline 'no'
brew install chrome
#+end_src
**** Ubuntu
* Communication
** Slack
I use slack to chat with friends and family.
[[https://slack.com][Slack]]

#+begin_src sh :tangle mac.sh
# Check os to determine if we are using choco, brew, or apt-get
# install slack
#+end_src
